#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.296
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AmbifluxAdmin.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AIPL")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertContainerStatus(ContainerStatus instance);
    partial void UpdateContainerStatus(ContainerStatus instance);
    partial void DeleteContainerStatus(ContainerStatus instance);
    partial void InsertContainer(Container instance);
    partial void UpdateContainer(Container instance);
    partial void DeleteContainer(Container instance);
    partial void InsertProductCategory(ProductCategory instance);
    partial void UpdateProductCategory(ProductCategory instance);
    partial void DeleteProductCategory(ProductCategory instance);
    partial void InsertProductStatus(ProductStatus instance);
    partial void UpdateProductStatus(ProductStatus instance);
    partial void DeleteProductStatus(ProductStatus instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertOrderStatus(OrderStatus instance);
    partial void UpdateOrderStatus(OrderStatus instance);
    partial void DeleteOrderStatus(OrderStatus instance);
    partial void InsertOrderHeader(OrderHeader instance);
    partial void UpdateOrderHeader(OrderHeader instance);
    partial void DeleteOrderHeader(OrderHeader instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertResourceStatus(ResourceStatus instance);
    partial void UpdateResourceStatus(ResourceStatus instance);
    partial void DeleteResourceStatus(ResourceStatus instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertLocationStatus(LocationStatus instance);
    partial void UpdateLocationStatus(LocationStatus instance);
    partial void DeleteLocationStatus(LocationStatus instance);
    partial void InsertLocationType(LocationType instance);
    partial void UpdateLocationType(LocationType instance);
    partial void DeleteLocationType(LocationType instance);
    partial void InsertWorkOrder(WorkOrder instance);
    partial void UpdateWorkOrder(WorkOrder instance);
    partial void DeleteWorkOrder(WorkOrder instance);
    partial void InsertWorkOrderRouting(WorkOrderRouting instance);
    partial void UpdateWorkOrderRouting(WorkOrderRouting instance);
    partial void DeleteWorkOrderRouting(WorkOrderRouting instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::AmbifluxAdmin.Properties.Settings.Default.AIPLConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Contact> Contact
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<ContainerStatus> ContainerStatus
		{
			get
			{
				return this.GetTable<ContainerStatus>();
			}
		}
		
		public System.Data.Linq.Table<Container> Container
		{
			get
			{
				return this.GetTable<Container>();
			}
		}
		
		public System.Data.Linq.Table<ProductCategory> ProductCategory
		{
			get
			{
				return this.GetTable<ProductCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProductStatus> ProductStatus
		{
			get
			{
				return this.GetTable<ProductStatus>();
			}
		}
		
		public System.Data.Linq.Table<Product> Product
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<OrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<OrderHeader> OrderHeader
		{
			get
			{
				return this.GetTable<OrderHeader>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customer
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resource
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<ResourceStatus> ResourceStatus
		{
			get
			{
				return this.GetTable<ResourceStatus>();
			}
		}
		
		public System.Data.Linq.Table<Location> Location
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<LocationStatus> LocationStatus
		{
			get
			{
				return this.GetTable<LocationStatus>();
			}
		}
		
		public System.Data.Linq.Table<LocationType> LocationType
		{
			get
			{
				return this.GetTable<LocationType>();
			}
		}
		
		public System.Data.Linq.Table<WorkOrder> WorkOrder
		{
			get
			{
				return this.GetTable<WorkOrder>();
			}
		}
		
		public System.Data.Linq.Table<WorkOrderRouting> WorkOrderRouting
		{
			get
			{
				return this.GetTable<WorkOrderRouting>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _EmailAddress;
		
		private string _Phone;
		
		private EntitySet<Customer> _Customer;
		
		private EntitySet<Employee> _Employee;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public Contact()
		{
			this._Customer = new EntitySet<Customer>(new Action<Customer>(this.attach_Customer), new Action<Customer>(this.detach_Customer));
			this._Employee = new EntitySet<Employee>(new Action<Employee>(this.attach_Employee), new Action<Employee>(this.detach_Employee));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(64)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(25)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Customer", Storage="_Customer", ThisKey="ContactID", OtherKey="ContactID")]
		public EntitySet<Customer> Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				this._Customer.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Employee", Storage="_Employee", ThisKey="ContactID", OtherKey="ContactID")]
		public EntitySet<Employee> Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				this._Employee.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customer(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Customer(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Employee(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContainerStatus")]
	public partial class ContainerStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContainerStatusID;
		
		private string _Value;
		
		private EntitySet<Container> _Container;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContainerStatusIDChanging(int value);
    partial void OnContainerStatusIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ContainerStatus()
		{
			this._Container = new EntitySet<Container>(new Action<Container>(this.attach_Container), new Action<Container>(this.detach_Container));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainerStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContainerStatusID
		{
			get
			{
				return this._ContainerStatusID;
			}
			set
			{
				if ((this._ContainerStatusID != value))
				{
					this.OnContainerStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ContainerStatusID = value;
					this.SendPropertyChanged("ContainerStatusID");
					this.OnContainerStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContainerStatus_Container", Storage="_Container", ThisKey="ContainerStatusID", OtherKey="ContainerStatusID")]
		public EntitySet<Container> Container
		{
			get
			{
				return this._Container;
			}
			set
			{
				this._Container.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Container(Container entity)
		{
			this.SendPropertyChanging();
			entity.ContainerStatus = this;
		}
		
		private void detach_Container(Container entity)
		{
			this.SendPropertyChanging();
			entity.ContainerStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Container")]
	public partial class Container : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContainerID;
		
		private string _Numero;
		
		private System.DateTime _ModifiedDate;
		
		private string _Type;
		
		private System.Nullable<int> _Length;
		
		private System.Nullable<int> _Width;
		
		private System.Nullable<int> _Height;
		
		private System.Nullable<int> _LocationID;
		
		private System.Nullable<int> _OrderID;
		
		private int _ContainerStatusID;
		
		private EntityRef<ContainerStatus> _ContainerStatus;
		
		private EntityRef<OrderHeader> _OrderHeader;
		
		private EntityRef<Location> _Location;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContainerIDChanging(int value);
    partial void OnContainerIDChanged();
    partial void OnNumeroChanging(string value);
    partial void OnNumeroChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnLengthChanging(System.Nullable<int> value);
    partial void OnLengthChanged();
    partial void OnWidthChanging(System.Nullable<int> value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    partial void OnOrderIDChanging(System.Nullable<int> value);
    partial void OnOrderIDChanged();
    partial void OnContainerStatusIDChanging(int value);
    partial void OnContainerStatusIDChanged();
    #endregion
		
		public Container()
		{
			this._ContainerStatus = default(EntityRef<ContainerStatus>);
			this._OrderHeader = default(EntityRef<OrderHeader>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContainerID
		{
			get
			{
				return this._ContainerID;
			}
			set
			{
				if ((this._ContainerID != value))
				{
					this.OnContainerIDChanging(value);
					this.SendPropertyChanging();
					this._ContainerID = value;
					this.SendPropertyChanged("ContainerID");
					this.OnContainerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Numero", AutoSync=AutoSync.Always, DbType="VarChar(13) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string Numero
		{
			get
			{
				return this._Numero;
			}
			set
			{
				if ((this._Numero != value))
				{
					this.OnNumeroChanging(value);
					this.SendPropertyChanging();
					this._Numero = value;
					this.SendPropertyChanged("Numero");
					this.OnNumeroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL", IsDbGenerated=true)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Char(32)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int")]
		public System.Nullable<int> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int")]
		public System.Nullable<int> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int")]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int")]
		public System.Nullable<int> OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._OrderHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainerStatusID", DbType="Int NOT NULL")]
		public int ContainerStatusID
		{
			get
			{
				return this._ContainerStatusID;
			}
			set
			{
				if ((this._ContainerStatusID != value))
				{
					if (this._ContainerStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContainerStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ContainerStatusID = value;
					this.SendPropertyChanged("ContainerStatusID");
					this.OnContainerStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContainerStatus_Container", Storage="_ContainerStatus", ThisKey="ContainerStatusID", OtherKey="ContainerStatusID", IsForeignKey=true)]
		public ContainerStatus ContainerStatus
		{
			get
			{
				return this._ContainerStatus.Entity;
			}
			set
			{
				ContainerStatus previousValue = this._ContainerStatus.Entity;
				if (((previousValue != value) 
							|| (this._ContainerStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContainerStatus.Entity = null;
						previousValue.Container.Remove(this);
					}
					this._ContainerStatus.Entity = value;
					if ((value != null))
					{
						value.Container.Add(this);
						this._ContainerStatusID = value.ContainerStatusID;
					}
					else
					{
						this._ContainerStatusID = default(int);
					}
					this.SendPropertyChanged("ContainerStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderHeader_Container", Storage="_OrderHeader", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public OrderHeader OrderHeader
		{
			get
			{
				return this._OrderHeader.Entity;
			}
			set
			{
				OrderHeader previousValue = this._OrderHeader.Entity;
				if (((previousValue != value) 
							|| (this._OrderHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderHeader.Entity = null;
						previousValue.Container.Remove(this);
					}
					this._OrderHeader.Entity = value;
					if ((value != null))
					{
						value.Container.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrderHeader");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Container", Storage="_Location", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Container.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Container.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductCategory")]
	public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductCategoryID;
		
		private string _Name;
		
		private System.Nullable<int> _DefaultLocationID;
		
		private EntitySet<Product> _Product;
		
		private EntitySet<DemandeExpress> _DemandeExpress;
		
		private EntityRef<Location> _Location;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductCategoryIDChanging(int value);
    partial void OnProductCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDefaultLocationIDChanging(System.Nullable<int> value);
    partial void OnDefaultLocationIDChanged();
    #endregion
		
		public ProductCategory()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			this._DemandeExpress = new EntitySet<DemandeExpress>(new Action<DemandeExpress>(this.attach_DemandeExpress), new Action<DemandeExpress>(this.detach_DemandeExpress));
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductCategoryID
		{
			get
			{
				return this._ProductCategoryID;
			}
			set
			{
				if ((this._ProductCategoryID != value))
				{
					this.OnProductCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProductCategoryID = value;
					this.SendPropertyChanged("ProductCategoryID");
					this.OnProductCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultLocationID", DbType="Int")]
		public System.Nullable<int> DefaultLocationID
		{
			get
			{
				return this._DefaultLocationID;
			}
			set
			{
				if ((this._DefaultLocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultLocationIDChanging(value);
					this.SendPropertyChanging();
					this._DefaultLocationID = value;
					this.SendPropertyChanged("DefaultLocationID");
					this.OnDefaultLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_Product", Storage="_Product", ThisKey="ProductCategoryID", OtherKey="ProductCategoryID")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_DemandeExpress", Storage="_DemandeExpress", ThisKey="ProductCategoryID", OtherKey="ProductCategoryID")]
		public EntitySet<DemandeExpress> DemandeExpress
		{
			get
			{
				return this._DemandeExpress;
			}
			set
			{
				this._DemandeExpress.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ProductCategory", Storage="_Location", ThisKey="DefaultLocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.ProductCategory.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.ProductCategory.Add(this);
						this._DefaultLocationID = value.LocationID;
					}
					else
					{
						this._DefaultLocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = null;
		}
		
		private void attach_DemandeExpress(DemandeExpress entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = this;
		}
		
		private void detach_DemandeExpress(DemandeExpress entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductStatus")]
	public partial class ProductStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductStatusID;
		
		private string _Value;
		
		private EntitySet<Product> _Product;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductStatusIDChanging(int value);
    partial void OnProductStatusIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ProductStatus()
		{
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductStatusID
		{
			get
			{
				return this._ProductStatusID;
			}
			set
			{
				if ((this._ProductStatusID != value))
				{
					this.OnProductStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ProductStatusID = value;
					this.SendPropertyChanged("ProductStatusID");
					this.OnProductStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductStatus_Product", Storage="_Product", ThisKey="ProductStatusID", OtherKey="ProductStatusID")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductStatus = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _Description;
		
		private string _ProductNumber;
		
		private string _Size;
		
		private System.Nullable<int> _ProductCategoryID;
		
		private System.Nullable<int> _DefaultLocationID;
		
		private System.Nullable<int> _LocationID;
		
		private int _ProductStatusID;
		
		private EntityRef<ProductStatus> _ProductStatus;
		
		private EntityRef<ProductCategory> _ProductCategory;
		
		private EntityRef<Location> _Location;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnProductNumberChanging(string value);
    partial void OnProductNumberChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnProductCategoryIDChanging(System.Nullable<int> value);
    partial void OnProductCategoryIDChanged();
    partial void OnDefaultLocationIDChanging(System.Nullable<int> value);
    partial void OnDefaultLocationIDChanged();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    partial void OnProductStatusIDChanging(int value);
    partial void OnProductStatusIDChanged();
    #endregion
		
		public Product()
		{
			this._ProductStatus = default(EntityRef<ProductStatus>);
			this._ProductCategory = default(EntityRef<ProductCategory>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductNumber
		{
			get
			{
				return this._ProductNumber;
			}
			set
			{
				if ((this._ProductNumber != value))
				{
					this.OnProductNumberChanging(value);
					this.SendPropertyChanging();
					this._ProductNumber = value;
					this.SendPropertyChanged("ProductNumber");
					this.OnProductNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="NVarChar(10)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCategoryID", DbType="Int")]
		public System.Nullable<int> ProductCategoryID
		{
			get
			{
				return this._ProductCategoryID;
			}
			set
			{
				if ((this._ProductCategoryID != value))
				{
					if (this._ProductCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProductCategoryID = value;
					this.SendPropertyChanged("ProductCategoryID");
					this.OnProductCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultLocationID", DbType="Int")]
		public System.Nullable<int> DefaultLocationID
		{
			get
			{
				return this._DefaultLocationID;
			}
			set
			{
				if ((this._DefaultLocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultLocationIDChanging(value);
					this.SendPropertyChanging();
					this._DefaultLocationID = value;
					this.SendPropertyChanged("DefaultLocationID");
					this.OnDefaultLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductStatusID", DbType="Int NOT NULL")]
		public int ProductStatusID
		{
			get
			{
				return this._ProductStatusID;
			}
			set
			{
				if ((this._ProductStatusID != value))
				{
					if (this._ProductStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ProductStatusID = value;
					this.SendPropertyChanged("ProductStatusID");
					this.OnProductStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductStatus_Product", Storage="_ProductStatus", ThisKey="ProductStatusID", OtherKey="ProductStatusID", IsForeignKey=true)]
		public ProductStatus ProductStatus
		{
			get
			{
				return this._ProductStatus.Entity;
			}
			set
			{
				ProductStatus previousValue = this._ProductStatus.Entity;
				if (((previousValue != value) 
							|| (this._ProductStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductStatus.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._ProductStatus.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._ProductStatusID = value.ProductStatusID;
					}
					else
					{
						this._ProductStatusID = default(int);
					}
					this.SendPropertyChanged("ProductStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_Product", Storage="_ProductCategory", ThisKey="ProductCategoryID", OtherKey="ProductCategoryID", IsForeignKey=true)]
		public ProductCategory ProductCategory
		{
			get
			{
				return this._ProductCategory.Entity;
			}
			set
			{
				ProductCategory previousValue = this._ProductCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProductCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductCategory.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._ProductCategory.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._ProductCategoryID = value.ProductCategoryID;
					}
					else
					{
						this._ProductCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Product", Storage="_Location", ThisKey="DefaultLocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Product.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Product.Add(this);
						this._DefaultLocationID = value.LocationID;
					}
					else
					{
						this._DefaultLocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderStatusID;
		
		private string _Value;
		
		private EntitySet<OrderHeader> _OrderHeader;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderStatusIDChanging(int value);
    partial void OnOrderStatusIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public OrderStatus()
		{
			this._OrderHeader = new EntitySet<OrderHeader>(new Action<OrderHeader>(this.attach_OrderHeader), new Action<OrderHeader>(this.detach_OrderHeader));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderStatusID
		{
			get
			{
				return this._OrderStatusID;
			}
			set
			{
				if ((this._OrderStatusID != value))
				{
					this.OnOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusID = value;
					this.SendPropertyChanged("OrderStatusID");
					this.OnOrderStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_OrderHeader", Storage="_OrderHeader", ThisKey="OrderStatusID", OtherKey="OrderStatusID")]
		public EntitySet<OrderHeader> OrderHeader
		{
			get
			{
				return this._OrderHeader;
			}
			set
			{
				this._OrderHeader.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderHeader(OrderHeader entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_OrderHeader(OrderHeader entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderHeader")]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="O", Type=typeof(OrderHeader))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="D", Type=typeof(DemandeExpress), IsDefault=true)]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="E", Type=typeof(Echange))]
	public partial class OrderHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private System.DateTime _OrderDate;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private string _OrderNo;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private int _CustomerID;
		
		private int _DeliveryLocationID;
		
		private char _OrderType;
		
		private System.Nullable<int> _OrderStatusID;
		
		private EntitySet<Container> _Container;
		
		private EntitySet<WorkOrder> _WorkOrder;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Location> _Location;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    partial void OnOrderNoChanging(string value);
    partial void OnOrderNoChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnDeliveryLocationIDChanging(int value);
    partial void OnDeliveryLocationIDChanged();
    partial void OnOrderTypeChanging(char value);
    partial void OnOrderTypeChanged();
    partial void OnOrderStatusIDChanging(System.Nullable<int> value);
    partial void OnOrderStatusIDChanged();
    #endregion
		
		public OrderHeader()
		{
			this._Container = new EntitySet<Container>(new Action<Container>(this.attach_Container), new Action<Container>(this.detach_Container));
			this._WorkOrder = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrder), new Action<WorkOrder>(this.detach_WorkOrder));
			this._OrderStatus = default(EntityRef<OrderStatus>);
			this._Customer = default(EntityRef<Customer>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL", IsDbGenerated=true)]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", AutoSync=AutoSync.Always, DbType="NVarChar(26) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime", IsDbGenerated=true)]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryLocationID", DbType="Int NOT NULL")]
		public int DeliveryLocationID
		{
			get
			{
				return this._DeliveryLocationID;
			}
			set
			{
				if ((this._DeliveryLocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeliveryLocationIDChanging(value);
					this.SendPropertyChanging();
					this._DeliveryLocationID = value;
					this.SendPropertyChanged("DeliveryLocationID");
					this.OnDeliveryLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderType", DbType="Char(1) NOT NULL", IsDiscriminator=true)]
		public char OrderType
		{
			get
			{
				return this._OrderType;
			}
			set
			{
				if ((this._OrderType != value))
				{
					this.OnOrderTypeChanging(value);
					this.SendPropertyChanging();
					this._OrderType = value;
					this.SendPropertyChanged("OrderType");
					this.OnOrderTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatusID", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true)]
		public System.Nullable<int> OrderStatusID
		{
			get
			{
				return this._OrderStatusID;
			}
			set
			{
				if ((this._OrderStatusID != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusID = value;
					this.SendPropertyChanged("OrderStatusID");
					this.OnOrderStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderHeader_Container", Storage="_Container", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<Container> Container
		{
			get
			{
				return this._Container;
			}
			set
			{
				this._Container.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderHeader_WorkOrder", Storage="_WorkOrder", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<WorkOrder> WorkOrder
		{
			get
			{
				return this._WorkOrder;
			}
			set
			{
				this._WorkOrder.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_OrderHeader", Storage="_OrderStatus", ThisKey="OrderStatusID", OtherKey="OrderStatusID", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.OrderHeader.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.OrderHeader.Add(this);
						this._OrderStatusID = value.OrderStatusID;
					}
					else
					{
						this._OrderStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_OrderHeader", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.OrderHeader.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.OrderHeader.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_OrderHeader", Storage="_Location", ThisKey="DeliveryLocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.OrderHeader.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.OrderHeader.Add(this);
						this._DeliveryLocationID = value.LocationID;
					}
					else
					{
						this._DeliveryLocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Container(Container entity)
		{
			this.SendPropertyChanging();
			entity.OrderHeader = this;
		}
		
		private void detach_Container(Container entity)
		{
			this.SendPropertyChanging();
			entity.OrderHeader = null;
		}
		
		private void attach_WorkOrder(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.OrderHeader = this;
		}
		
		private void detach_WorkOrder(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.OrderHeader = null;
		}
	}
	
	public partial class DemandeExpress : OrderHeader
	{
		
		private string _ObjetDemandeExpress;
		
		private System.Nullable<int> _ProductCategoryID;
		
		private EntityRef<ProductCategory> _ProductCategory;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjetDemandeExpressChanging(string value);
    partial void OnObjetDemandeExpressChanged();
    partial void OnProductCategoryIDChanging(System.Nullable<int> value);
    partial void OnProductCategoryIDChanged();
    #endregion
		
		public DemandeExpress()
		{
			this._ProductCategory = default(EntityRef<ProductCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjetDemandeExpress", DbType="NVarChar(MAX)")]
		public string ObjetDemandeExpress
		{
			get
			{
				return this._ObjetDemandeExpress;
			}
			set
			{
				if ((this._ObjetDemandeExpress != value))
				{
					this.OnObjetDemandeExpressChanging(value);
					this.SendPropertyChanging();
					this._ObjetDemandeExpress = value;
					this.SendPropertyChanged("ObjetDemandeExpress");
					this.OnObjetDemandeExpressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCategoryID", DbType="Int")]
		public System.Nullable<int> ProductCategoryID
		{
			get
			{
				return this._ProductCategoryID;
			}
			set
			{
				if ((this._ProductCategoryID != value))
				{
					if (this._ProductCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ProductCategoryID = value;
					this.SendPropertyChanged("ProductCategoryID");
					this.OnProductCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductCategory_DemandeExpress", Storage="_ProductCategory", ThisKey="ProductCategoryID", OtherKey="ProductCategoryID", IsForeignKey=true)]
		public ProductCategory ProductCategory
		{
			get
			{
				return this._ProductCategory.Entity;
			}
			set
			{
				ProductCategory previousValue = this._ProductCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProductCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductCategory.Entity = null;
						previousValue.DemandeExpress.Remove(this);
					}
					this._ProductCategory.Entity = value;
					if ((value != null))
					{
						value.DemandeExpress.Add(this);
						this._ProductCategoryID = value.ProductCategoryID;
					}
					else
					{
						this._ProductCategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductCategory");
				}
			}
		}
	}
	
	public partial class Echange : OrderHeader
	{
		
		private string _Comment;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public Echange()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(256)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private char _CustomerType;
		
		private string _AccountNo;
		
		private System.Nullable<int> _ContactID;
		
		private string _UserName;
		
		private EntitySet<OrderHeader> _OrderHeader;
		
		private EntityRef<Contact> _Contact;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerTypeChanging(char value);
    partial void OnCustomerTypeChanged();
    partial void OnAccountNoChanging(string value);
    partial void OnAccountNoChanged();
    partial void OnContactIDChanging(System.Nullable<int> value);
    partial void OnContactIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public Customer()
		{
			this._OrderHeader = new EntitySet<OrderHeader>(new Action<OrderHeader>(this.attach_OrderHeader), new Action<OrderHeader>(this.detach_OrderHeader));
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerType", DbType="Char(1) NOT NULL")]
		public char CustomerType
		{
			get
			{
				return this._CustomerType;
			}
			set
			{
				if ((this._CustomerType != value))
				{
					this.OnCustomerTypeChanging(value);
					this.SendPropertyChanging();
					this._CustomerType = value;
					this.SendPropertyChanged("CustomerType");
					this.OnCustomerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNo", AutoSync=AutoSync.Always, DbType="VarChar(11) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string AccountNo
		{
			get
			{
				return this._AccountNo;
			}
			set
			{
				if ((this._AccountNo != value))
				{
					this.OnAccountNoChanging(value);
					this.SendPropertyChanging();
					this._AccountNo = value;
					this.SendPropertyChanged("AccountNo");
					this.OnAccountNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int")]
		public System.Nullable<int> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_OrderHeader", Storage="_OrderHeader", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<OrderHeader> OrderHeader
		{
			get
			{
				return this._OrderHeader;
			}
			set
			{
				this._OrderHeader.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Customer", Storage="_Contact", ThisKey="ContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Customer.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Customer.Add(this);
						this._ContactID = value.ContactID;
					}
					else
					{
						this._ContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderHeader(OrderHeader entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_OrderHeader(OrderHeader entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Resource")]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="R", Type=typeof(Resource))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="P", Type=typeof(Employee), IsDefault=true)]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="E", Type=typeof(Equipment))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="W", Type=typeof(Workstation))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="S", Type=typeof(SRMA))]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResourceID;
		
		private char _ResourceType;
		
		private string _Name;
		
		private System.DateTime _DateModified;
		
		private System.Nullable<char> _EquipmentType;
		
		private System.Nullable<int> _ResourceStatusID;
		
		private EntitySet<WorkOrderRouting> _WorkOrderRouting;
		
		private EntityRef<ResourceStatus> _ResourceStatus;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIDChanging(int value);
    partial void OnResourceIDChanged();
    partial void OnResourceTypeChanging(char value);
    partial void OnResourceTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    partial void OnEquipmentTypeChanging(System.Nullable<char> value);
    partial void OnEquipmentTypeChanged();
    partial void OnResourceStatusIDChanging(System.Nullable<int> value);
    partial void OnResourceStatusIDChanged();
    #endregion
		
		public Resource()
		{
			this._WorkOrderRouting = new EntitySet<WorkOrderRouting>(new Action<WorkOrderRouting>(this.attach_WorkOrderRouting), new Action<WorkOrderRouting>(this.detach_WorkOrderRouting));
			this._ResourceStatus = default(EntityRef<ResourceStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResourceID
		{
			get
			{
				return this._ResourceID;
			}
			set
			{
				if ((this._ResourceID != value))
				{
					this.OnResourceIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceID = value;
					this.SendPropertyChanged("ResourceID");
					this.OnResourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceType", DbType="Char(1) NOT NULL", IsDiscriminator=true)]
		public char ResourceType
		{
			get
			{
				return this._ResourceType;
			}
			set
			{
				if ((this._ResourceType != value))
				{
					this.OnResourceTypeChanging(value);
					this.SendPropertyChanging();
					this._ResourceType = value;
					this.SendPropertyChanged("ResourceType");
					this.OnResourceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(32)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL", IsDbGenerated=true)]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentType", DbType="Char(1)")]
		public System.Nullable<char> EquipmentType
		{
			get
			{
				return this._EquipmentType;
			}
			set
			{
				if ((this._EquipmentType != value))
				{
					this.OnEquipmentTypeChanging(value);
					this.SendPropertyChanging();
					this._EquipmentType = value;
					this.SendPropertyChanged("EquipmentType");
					this.OnEquipmentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceStatusID", DbType="Int")]
		public System.Nullable<int> ResourceStatusID
		{
			get
			{
				return this._ResourceStatusID;
			}
			set
			{
				if ((this._ResourceStatusID != value))
				{
					if (this._ResourceStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceStatusIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceStatusID = value;
					this.SendPropertyChanged("ResourceStatusID");
					this.OnResourceStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_WorkOrderRouting", Storage="_WorkOrderRouting", ThisKey="ResourceID", OtherKey="ResourceID")]
		public EntitySet<WorkOrderRouting> WorkOrderRouting
		{
			get
			{
				return this._WorkOrderRouting;
			}
			set
			{
				this._WorkOrderRouting.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatus_Resource", Storage="_ResourceStatus", ThisKey="ResourceStatusID", OtherKey="RessourceStatusID", IsForeignKey=true)]
		public ResourceStatus ResourceStatus
		{
			get
			{
				return this._ResourceStatus.Entity;
			}
			set
			{
				ResourceStatus previousValue = this._ResourceStatus.Entity;
				if (((previousValue != value) 
							|| (this._ResourceStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceStatus.Entity = null;
						previousValue.Resource.Remove(this);
					}
					this._ResourceStatus.Entity = value;
					if ((value != null))
					{
						value.Resource.Add(this);
						this._ResourceStatusID = value.RessourceStatusID;
					}
					else
					{
						this._ResourceStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResourceStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkOrderRouting(WorkOrderRouting entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_WorkOrderRouting(WorkOrderRouting entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
	}
	
	public partial class Employee : Resource
	{
		
		private string _CardID;
		
		private string _Login;
		
		private System.Nullable<int> _ContactID;
		
		private bool _IsAdministrator;
		
		private EntityRef<Contact> _Contact;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCardIDChanging(string value);
    partial void OnCardIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnContactIDChanging(System.Nullable<int> value);
    partial void OnContactIDChanged();
    partial void OnIsAdministratorChanging(bool value);
    partial void OnIsAdministratorChanged();
    #endregion
		
		public Employee()
		{
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardID", DbType="NVarChar(50)")]
		public string CardID
		{
			get
			{
				return this._CardID;
			}
			set
			{
				if ((this._CardID != value))
				{
					this.OnCardIDChanging(value);
					this.SendPropertyChanging();
					this._CardID = value;
					this.SendPropertyChanged("CardID");
					this.OnCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(32)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int")]
		public System.Nullable<int> ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdministrator", IsDbGenerated=true)]
		public bool IsAdministrator
		{
			get
			{
				return this._IsAdministrator;
			}
			set
			{
				if ((this._IsAdministrator != value))
				{
					this.OnIsAdministratorChanging(value);
					this.SendPropertyChanging();
					this._IsAdministrator = value;
					this.SendPropertyChanged("IsAdministrator");
					this.OnIsAdministratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Employee", Storage="_Contact", ThisKey="ContactID", OtherKey="ContactID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Employee.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Employee.Add(this);
						this._ContactID = value.ContactID;
					}
					else
					{
						this._ContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
	}
	
	public partial class Equipment : Resource
	{
		
		private string _Name;
		
		private string _IPAddress1;
		
		private string _IPAddress2;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIPAddress1Changing(string value);
    partial void OnIPAddress1Changed();
    partial void OnIPAddress2Changing(string value);
    partial void OnIPAddress2Changed();
    #endregion
		
		public Equipment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(32)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress1", DbType="Char(16)")]
		public string IPAddress1
		{
			get
			{
				return this._IPAddress1;
			}
			set
			{
				if ((this._IPAddress1 != value))
				{
					this.OnIPAddress1Changing(value);
					this.SendPropertyChanging();
					this._IPAddress1 = value;
					this.SendPropertyChanged("IPAddress1");
					this.OnIPAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress2", DbType="Char(16)")]
		public string IPAddress2
		{
			get
			{
				return this._IPAddress2;
			}
			set
			{
				if ((this._IPAddress2 != value))
				{
					this.OnIPAddress2Changing(value);
					this.SendPropertyChanging();
					this._IPAddress2 = value;
					this.SendPropertyChanged("IPAddress2");
					this.OnIPAddress2Changed();
				}
			}
		}
	}
	
	public partial class Workstation : Equipment
	{
		
		private System.Nullable<int> _LocationID;
		
		private EntityRef<Location> _Location;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    #endregion
		
		public Workstation()
		{
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Workstation", Storage="_Location", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Workstation.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Workstation.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
	}
	
	public partial class SRMA : Equipment
	{
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    #endregion
		
		public SRMA()
		{
			OnCreated();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceStatus")]
	public partial class ResourceStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RessourceStatusID;
		
		private string _Value;
		
		private EntitySet<Resource> _Resource;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRessourceStatusIDChanging(int value);
    partial void OnRessourceStatusIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ResourceStatus()
		{
			this._Resource = new EntitySet<Resource>(new Action<Resource>(this.attach_Resource), new Action<Resource>(this.detach_Resource));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RessourceStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RessourceStatusID
		{
			get
			{
				return this._RessourceStatusID;
			}
			set
			{
				if ((this._RessourceStatusID != value))
				{
					this.OnRessourceStatusIDChanging(value);
					this.SendPropertyChanging();
					this._RessourceStatusID = value;
					this.SendPropertyChanged("RessourceStatusID");
					this.OnRessourceStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceStatus_Resource", Storage="_Resource", ThisKey="RessourceStatusID", OtherKey="ResourceStatusID")]
		public EntitySet<Resource> Resource
		{
			get
			{
				return this._Resource;
			}
			set
			{
				this._Resource.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Resource(Resource entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatus = this;
		}
		
		private void detach_Resource(Resource entity)
		{
			this.SendPropertyChanging();
			entity.ResourceStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private string _Name;
		
		private System.DateTime _ModifiedDate;
		
		private System.Nullable<int> _LocationTypeID;
		
		private System.Nullable<int> _LocationStatusID;
		
		private EntitySet<Container> _Container;
		
		private EntitySet<ProductCategory> _ProductCategory;
		
		private EntitySet<Product> _Product;
		
		private EntitySet<OrderHeader> _OrderHeader;
		
		private EntitySet<Workstation> _Workstation;
		
		private EntityRef<Location> _Location2;
		
		private EntitySet<WorkOrderRouting> _WorkOrderRouting;
		
		private EntitySet<WorkOrderRouting> _WorkOrderRouting1;
		
		private EntityRef<Location> _Location1;
		
		private EntityRef<LocationStatus> _LocationStatus;
		
		private EntityRef<LocationType> _LocationType;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnLocationTypeIDChanging(System.Nullable<int> value);
    partial void OnLocationTypeIDChanged();
    partial void OnLocationStatusIDChanging(System.Nullable<int> value);
    partial void OnLocationStatusIDChanged();
    #endregion
		
		public Location()
		{
			this._Container = new EntitySet<Container>(new Action<Container>(this.attach_Container), new Action<Container>(this.detach_Container));
			this._ProductCategory = new EntitySet<ProductCategory>(new Action<ProductCategory>(this.attach_ProductCategory), new Action<ProductCategory>(this.detach_ProductCategory));
			this._Product = new EntitySet<Product>(new Action<Product>(this.attach_Product), new Action<Product>(this.detach_Product));
			this._OrderHeader = new EntitySet<OrderHeader>(new Action<OrderHeader>(this.attach_OrderHeader), new Action<OrderHeader>(this.detach_OrderHeader));
			this._Workstation = new EntitySet<Workstation>(new Action<Workstation>(this.attach_Workstation), new Action<Workstation>(this.detach_Workstation));
			this._Location2 = default(EntityRef<Location>);
			this._WorkOrderRouting = new EntitySet<WorkOrderRouting>(new Action<WorkOrderRouting>(this.attach_WorkOrderRouting), new Action<WorkOrderRouting>(this.detach_WorkOrderRouting));
			this._WorkOrderRouting1 = new EntitySet<WorkOrderRouting>(new Action<WorkOrderRouting>(this.attach_WorkOrderRouting1), new Action<WorkOrderRouting>(this.detach_WorkOrderRouting1));
			this._Location1 = default(EntityRef<Location>);
			this._LocationStatus = default(EntityRef<LocationStatus>);
			this._LocationType = default(EntityRef<LocationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Char(13) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL", IsDbGenerated=true)]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationTypeID", DbType="Int")]
		public System.Nullable<int> LocationTypeID
		{
			get
			{
				return this._LocationTypeID;
			}
			set
			{
				if ((this._LocationTypeID != value))
				{
					if (this._LocationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LocationTypeID = value;
					this.SendPropertyChanged("LocationTypeID");
					this.OnLocationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationStatusID", DbType="Int")]
		public System.Nullable<int> LocationStatusID
		{
			get
			{
				return this._LocationStatusID;
			}
			set
			{
				if ((this._LocationStatusID != value))
				{
					if (this._LocationStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationStatusIDChanging(value);
					this.SendPropertyChanging();
					this._LocationStatusID = value;
					this.SendPropertyChanged("LocationStatusID");
					this.OnLocationStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Container", Storage="_Container", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<Container> Container
		{
			get
			{
				return this._Container;
			}
			set
			{
				this._Container.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_ProductCategory", Storage="_ProductCategory", ThisKey="LocationID", OtherKey="DefaultLocationID")]
		public EntitySet<ProductCategory> ProductCategory
		{
			get
			{
				return this._ProductCategory;
			}
			set
			{
				this._ProductCategory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Product", Storage="_Product", ThisKey="LocationID", OtherKey="DefaultLocationID")]
		public EntitySet<Product> Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				this._Product.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_OrderHeader", Storage="_OrderHeader", ThisKey="LocationID", OtherKey="DeliveryLocationID")]
		public EntitySet<OrderHeader> OrderHeader
		{
			get
			{
				return this._OrderHeader;
			}
			set
			{
				this._OrderHeader.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Workstation", Storage="_Workstation", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<Workstation> Workstation
		{
			get
			{
				return this._Workstation;
			}
			set
			{
				this._Workstation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Location", Storage="_Location2", ThisKey="LocationID", OtherKey="LocationID", IsUnique=true, IsForeignKey=false)]
		public Location Location2
		{
			get
			{
				return this._Location2.Entity;
			}
			set
			{
				Location previousValue = this._Location2.Entity;
				if (((previousValue != value) 
							|| (this._Location2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location2.Entity = null;
						previousValue.Location1 = null;
					}
					this._Location2.Entity = value;
					if ((value != null))
					{
						value.Location1 = this;
					}
					this.SendPropertyChanged("Location2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_WorkOrderRouting", Storage="_WorkOrderRouting", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<WorkOrderRouting> WorkOrderRouting
		{
			get
			{
				return this._WorkOrderRouting;
			}
			set
			{
				this._WorkOrderRouting.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_WorkOrderRouting1", Storage="_WorkOrderRouting1", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<WorkOrderRouting> WorkOrderRouting1
		{
			get
			{
				return this._WorkOrderRouting1;
			}
			set
			{
				this._WorkOrderRouting1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Location", Storage="_Location1", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location1
		{
			get
			{
				return this._Location1.Entity;
			}
			set
			{
				Location previousValue = this._Location1.Entity;
				if (((previousValue != value) 
							|| (this._Location1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location1.Entity = null;
						previousValue.Location2 = null;
					}
					this._Location1.Entity = value;
					if ((value != null))
					{
						value.Location2 = this;
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationStatus_Location", Storage="_LocationStatus", ThisKey="LocationStatusID", OtherKey="LocationStatusID", IsForeignKey=true)]
		public LocationStatus LocationStatus
		{
			get
			{
				return this._LocationStatus.Entity;
			}
			set
			{
				LocationStatus previousValue = this._LocationStatus.Entity;
				if (((previousValue != value) 
							|| (this._LocationStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocationStatus.Entity = null;
						previousValue.Location.Remove(this);
					}
					this._LocationStatus.Entity = value;
					if ((value != null))
					{
						value.Location.Add(this);
						this._LocationStatusID = value.LocationStatusID;
					}
					else
					{
						this._LocationStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LocationStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationType_Location", Storage="_LocationType", ThisKey="LocationTypeID", OtherKey="LocationTypeID", IsForeignKey=true)]
		public LocationType LocationType
		{
			get
			{
				return this._LocationType.Entity;
			}
			set
			{
				LocationType previousValue = this._LocationType.Entity;
				if (((previousValue != value) 
							|| (this._LocationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocationType.Entity = null;
						previousValue.Location.Remove(this);
					}
					this._LocationType.Entity = value;
					if ((value != null))
					{
						value.Location.Add(this);
						this._LocationTypeID = value.LocationTypeID;
					}
					else
					{
						this._LocationTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LocationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Container(Container entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Container(Container entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_ProductCategory(ProductCategory entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_ProductCategory(ProductCategory entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Product(Product entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_OrderHeader(OrderHeader entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_OrderHeader(OrderHeader entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_Workstation(Workstation entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Workstation(Workstation entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_WorkOrderRouting(WorkOrderRouting entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_WorkOrderRouting(WorkOrderRouting entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_WorkOrderRouting1(WorkOrderRouting entity)
		{
			this.SendPropertyChanging();
			entity.Location1 = this;
		}
		
		private void detach_WorkOrderRouting1(WorkOrderRouting entity)
		{
			this.SendPropertyChanging();
			entity.Location1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationStatus")]
	public partial class LocationStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationStatusID;
		
		private string _Value;
		
		private EntitySet<Location> _Location;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationStatusIDChanging(int value);
    partial void OnLocationStatusIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public LocationStatus()
		{
			this._Location = new EntitySet<Location>(new Action<Location>(this.attach_Location), new Action<Location>(this.detach_Location));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationStatusID
		{
			get
			{
				return this._LocationStatusID;
			}
			set
			{
				if ((this._LocationStatusID != value))
				{
					this.OnLocationStatusIDChanging(value);
					this.SendPropertyChanging();
					this._LocationStatusID = value;
					this.SendPropertyChanged("LocationStatusID");
					this.OnLocationStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationStatus_Location", Storage="_Location", ThisKey="LocationStatusID", OtherKey="LocationStatusID")]
		public EntitySet<Location> Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				this._Location.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Location(Location entity)
		{
			this.SendPropertyChanging();
			entity.LocationStatus = this;
		}
		
		private void detach_Location(Location entity)
		{
			this.SendPropertyChanging();
			entity.LocationStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationType")]
	public partial class LocationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationTypeID;
		
		private string _LocationTypeLabel;
		
		private EntitySet<Location> _Location;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationTypeIDChanging(int value);
    partial void OnLocationTypeIDChanged();
    partial void OnLocationTypeLabelChanging(string value);
    partial void OnLocationTypeLabelChanged();
    #endregion
		
		public LocationType()
		{
			this._Location = new EntitySet<Location>(new Action<Location>(this.attach_Location), new Action<Location>(this.detach_Location));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationTypeID
		{
			get
			{
				return this._LocationTypeID;
			}
			set
			{
				if ((this._LocationTypeID != value))
				{
					this.OnLocationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LocationTypeID = value;
					this.SendPropertyChanged("LocationTypeID");
					this.OnLocationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationTypeLabel", DbType="NChar(64) NOT NULL", CanBeNull=false)]
		public string LocationTypeLabel
		{
			get
			{
				return this._LocationTypeLabel;
			}
			set
			{
				if ((this._LocationTypeLabel != value))
				{
					this.OnLocationTypeLabelChanging(value);
					this.SendPropertyChanging();
					this._LocationTypeLabel = value;
					this.SendPropertyChanged("LocationTypeLabel");
					this.OnLocationTypeLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationType_Location", Storage="_Location", ThisKey="LocationTypeID", OtherKey="LocationTypeID")]
		public EntitySet<Location> Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				this._Location.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Location(Location entity)
		{
			this.SendPropertyChanging();
			entity.LocationType = this;
		}
		
		private void detach_Location(Location entity)
		{
			this.SendPropertyChanging();
			entity.LocationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrder")]
	public partial class WorkOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkOrderID;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private int _OrderID;
		
		private string _WorkOrderNo;
		
		private System.Nullable<int> _WorkOrderStatusID;
		
		private string _Type;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntityRef<WorkOrder> _WorkOrder2;
		
		private EntitySet<WorkOrderRouting> _WorkOrderRouting;
		
		private EntityRef<OrderHeader> _OrderHeader;
		
		private EntityRef<WorkOrder> _WorkOrder1;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkOrderIDChanging(int value);
    partial void OnWorkOrderIDChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnWorkOrderNoChanging(string value);
    partial void OnWorkOrderNoChanged();
    partial void OnWorkOrderStatusIDChanging(System.Nullable<int> value);
    partial void OnWorkOrderStatusIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public WorkOrder()
		{
			this._WorkOrder2 = default(EntityRef<WorkOrder>);
			this._WorkOrderRouting = new EntitySet<WorkOrderRouting>(new Action<WorkOrderRouting>(this.attach_WorkOrderRouting), new Action<WorkOrderRouting>(this.detach_WorkOrderRouting));
			this._OrderHeader = default(EntityRef<OrderHeader>);
			this._WorkOrder1 = default(EntityRef<WorkOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkOrderID
		{
			get
			{
				return this._WorkOrderID;
			}
			set
			{
				if ((this._WorkOrderID != value))
				{
					if (this._WorkOrder1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderID = value;
					this.SendPropertyChanged("WorkOrderID");
					this.OnWorkOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL")]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._OrderHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderNo", AutoSync=AutoSync.Always, DbType="VarChar(11) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string WorkOrderNo
		{
			get
			{
				return this._WorkOrderNo;
			}
			set
			{
				if ((this._WorkOrderNo != value))
				{
					this.OnWorkOrderNoChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderNo = value;
					this.SendPropertyChanged("WorkOrderNo");
					this.OnWorkOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderStatusID", DbType="Int")]
		public System.Nullable<int> WorkOrderStatusID
		{
			get
			{
				return this._WorkOrderStatusID;
			}
			set
			{
				if ((this._WorkOrderStatusID != value))
				{
					this.OnWorkOrderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderStatusID = value;
					this.SendPropertyChanged("WorkOrderStatusID");
					this.OnWorkOrderStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Char(3)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrder", Storage="_WorkOrder2", ThisKey="WorkOrderID", OtherKey="WorkOrderID", IsUnique=true, IsForeignKey=false)]
		public WorkOrder WorkOrder2
		{
			get
			{
				return this._WorkOrder2.Entity;
			}
			set
			{
				WorkOrder previousValue = this._WorkOrder2.Entity;
				if (((previousValue != value) 
							|| (this._WorkOrder2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrder2.Entity = null;
						previousValue.WorkOrder1 = null;
					}
					this._WorkOrder2.Entity = value;
					if ((value != null))
					{
						value.WorkOrder1 = this;
					}
					this.SendPropertyChanged("WorkOrder2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrderRouting", Storage="_WorkOrderRouting", ThisKey="WorkOrderID", OtherKey="WorkOrderID")]
		public EntitySet<WorkOrderRouting> WorkOrderRouting
		{
			get
			{
				return this._WorkOrderRouting;
			}
			set
			{
				this._WorkOrderRouting.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderHeader_WorkOrder", Storage="_OrderHeader", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public OrderHeader OrderHeader
		{
			get
			{
				return this._OrderHeader.Entity;
			}
			set
			{
				OrderHeader previousValue = this._OrderHeader.Entity;
				if (((previousValue != value) 
							|| (this._OrderHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderHeader.Entity = null;
						previousValue.WorkOrder.Remove(this);
					}
					this._OrderHeader.Entity = value;
					if ((value != null))
					{
						value.WorkOrder.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("OrderHeader");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrder", Storage="_WorkOrder1", ThisKey="WorkOrderID", OtherKey="WorkOrderID", IsForeignKey=true)]
		public WorkOrder WorkOrder1
		{
			get
			{
				return this._WorkOrder1.Entity;
			}
			set
			{
				WorkOrder previousValue = this._WorkOrder1.Entity;
				if (((previousValue != value) 
							|| (this._WorkOrder1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrder1.Entity = null;
						previousValue.WorkOrder2 = null;
					}
					this._WorkOrder1.Entity = value;
					if ((value != null))
					{
						value.WorkOrder2 = this;
						this._WorkOrderID = value.WorkOrderID;
					}
					else
					{
						this._WorkOrderID = default(int);
					}
					this.SendPropertyChanged("WorkOrder1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkOrderRouting(WorkOrderRouting entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = this;
		}
		
		private void detach_WorkOrderRouting(WorkOrderRouting entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderRouting")]
	public partial class WorkOrderRouting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkOrderID;
		
		private short _OperationSequence;
		
		private int _LocationID;
		
		private System.Nullable<int> _ResourceID;
		
		private System.Nullable<System.DateTime> _ScheduledStartDate;
		
		private System.Nullable<System.DateTime> _ScheduledEndDate;
		
		private System.Nullable<System.DateTime> _ActualStartDate;
		
		private System.Nullable<System.DateTime> _ActualEndDate;
		
		private System.Nullable<decimal> _ActualResourceHrs;
		
		private System.Nullable<decimal> _PlannedCost;
		
		private System.Nullable<decimal> _ActualCost;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<int> _WorkOrderRoutingStatusId;
		
		private System.Nullable<char> _Type;
		
		private string _WorkOrderRoutingNo;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Location> _Location1;
		
		private EntityRef<Resource> _Resource;
		
		private EntityRef<WorkOrder> _WorkOrder;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkOrderIDChanging(int value);
    partial void OnWorkOrderIDChanged();
    partial void OnOperationSequenceChanging(short value);
    partial void OnOperationSequenceChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnResourceIDChanging(System.Nullable<int> value);
    partial void OnResourceIDChanged();
    partial void OnScheduledStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnScheduledStartDateChanged();
    partial void OnScheduledEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnScheduledEndDateChanged();
    partial void OnActualStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualStartDateChanged();
    partial void OnActualEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActualEndDateChanged();
    partial void OnActualResourceHrsChanging(System.Nullable<decimal> value);
    partial void OnActualResourceHrsChanged();
    partial void OnPlannedCostChanging(System.Nullable<decimal> value);
    partial void OnPlannedCostChanged();
    partial void OnActualCostChanging(System.Nullable<decimal> value);
    partial void OnActualCostChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnWorkOrderRoutingStatusIdChanging(System.Nullable<int> value);
    partial void OnWorkOrderRoutingStatusIdChanged();
    partial void OnTypeChanging(System.Nullable<char> value);
    partial void OnTypeChanged();
    partial void OnWorkOrderRoutingNoChanging(string value);
    partial void OnWorkOrderRoutingNoChanged();
    #endregion
		
		public WorkOrderRouting()
		{
			this._Location = default(EntityRef<Location>);
			this._Location1 = default(EntityRef<Location>);
			this._Resource = default(EntityRef<Resource>);
			this._WorkOrder = default(EntityRef<WorkOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WorkOrderID
		{
			get
			{
				return this._WorkOrderID;
			}
			set
			{
				if ((this._WorkOrderID != value))
				{
					if (this._WorkOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderIDChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderID = value;
					this.SendPropertyChanged("WorkOrderID");
					this.OnWorkOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationSequence", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short OperationSequence
		{
			get
			{
				return this._OperationSequence;
			}
			set
			{
				if ((this._OperationSequence != value))
				{
					this.OnOperationSequenceChanging(value);
					this.SendPropertyChanging();
					this._OperationSequence = value;
					this.SendPropertyChanged("OperationSequence");
					this.OnOperationSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if ((this._Location.HasLoadedOrAssignedValue || this._Location1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceID", DbType="Int")]
		public System.Nullable<int> ResourceID
		{
			get
			{
				return this._ResourceID;
			}
			set
			{
				if ((this._ResourceID != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceID = value;
					this.SendPropertyChanged("ResourceID");
					this.OnResourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduledStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ScheduledStartDate
		{
			get
			{
				return this._ScheduledStartDate;
			}
			set
			{
				if ((this._ScheduledStartDate != value))
				{
					this.OnScheduledStartDateChanging(value);
					this.SendPropertyChanging();
					this._ScheduledStartDate = value;
					this.SendPropertyChanged("ScheduledStartDate");
					this.OnScheduledStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduledEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ScheduledEndDate
		{
			get
			{
				return this._ScheduledEndDate;
			}
			set
			{
				if ((this._ScheduledEndDate != value))
				{
					this.OnScheduledEndDateChanging(value);
					this.SendPropertyChanging();
					this._ScheduledEndDate = value;
					this.SendPropertyChanged("ScheduledEndDate");
					this.OnScheduledEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualStartDate
		{
			get
			{
				return this._ActualStartDate;
			}
			set
			{
				if ((this._ActualStartDate != value))
				{
					this.OnActualStartDateChanging(value);
					this.SendPropertyChanging();
					this._ActualStartDate = value;
					this.SendPropertyChanged("ActualStartDate");
					this.OnActualStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActualEndDate
		{
			get
			{
				return this._ActualEndDate;
			}
			set
			{
				if ((this._ActualEndDate != value))
				{
					this.OnActualEndDateChanging(value);
					this.SendPropertyChanging();
					this._ActualEndDate = value;
					this.SendPropertyChanged("ActualEndDate");
					this.OnActualEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualResourceHrs", DbType="Decimal(9,4)")]
		public System.Nullable<decimal> ActualResourceHrs
		{
			get
			{
				return this._ActualResourceHrs;
			}
			set
			{
				if ((this._ActualResourceHrs != value))
				{
					this.OnActualResourceHrsChanging(value);
					this.SendPropertyChanging();
					this._ActualResourceHrs = value;
					this.SendPropertyChanged("ActualResourceHrs");
					this.OnActualResourceHrsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlannedCost", DbType="Money")]
		public System.Nullable<decimal> PlannedCost
		{
			get
			{
				return this._PlannedCost;
			}
			set
			{
				if ((this._PlannedCost != value))
				{
					this.OnPlannedCostChanging(value);
					this.SendPropertyChanging();
					this._PlannedCost = value;
					this.SendPropertyChanged("PlannedCost");
					this.OnPlannedCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualCost", DbType="Money")]
		public System.Nullable<decimal> ActualCost
		{
			get
			{
				return this._ActualCost;
			}
			set
			{
				if ((this._ActualCost != value))
				{
					this.OnActualCostChanging(value);
					this.SendPropertyChanging();
					this._ActualCost = value;
					this.SendPropertyChanged("ActualCost");
					this.OnActualCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderRoutingStatusId", DbType="Int")]
		public System.Nullable<int> WorkOrderRoutingStatusId
		{
			get
			{
				return this._WorkOrderRoutingStatusId;
			}
			set
			{
				if ((this._WorkOrderRoutingStatusId != value))
				{
					this.OnWorkOrderRoutingStatusIdChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderRoutingStatusId = value;
					this.SendPropertyChanged("WorkOrderRoutingStatusId");
					this.OnWorkOrderRoutingStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Char(1)")]
		public System.Nullable<char> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderRoutingNo", AutoSync=AutoSync.Always, DbType="VarChar(14) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string WorkOrderRoutingNo
		{
			get
			{
				return this._WorkOrderRoutingNo;
			}
			set
			{
				if ((this._WorkOrderRoutingNo != value))
				{
					this.OnWorkOrderRoutingNoChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderRoutingNo = value;
					this.SendPropertyChanged("WorkOrderRoutingNo");
					this.OnWorkOrderRoutingNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_WorkOrderRouting", Storage="_Location", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.WorkOrderRouting.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.WorkOrderRouting.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_WorkOrderRouting1", Storage="_Location1", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location1
		{
			get
			{
				return this._Location1.Entity;
			}
			set
			{
				Location previousValue = this._Location1.Entity;
				if (((previousValue != value) 
							|| (this._Location1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location1.Entity = null;
						previousValue.WorkOrderRouting1.Remove(this);
					}
					this._Location1.Entity = value;
					if ((value != null))
					{
						value.WorkOrderRouting1.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_WorkOrderRouting", Storage="_Resource", ThisKey="ResourceID", OtherKey="ResourceID", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.WorkOrderRouting.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.WorkOrderRouting.Add(this);
						this._ResourceID = value.ResourceID;
					}
					else
					{
						this._ResourceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrderRouting", Storage="_WorkOrder", ThisKey="WorkOrderID", OtherKey="WorkOrderID", IsForeignKey=true)]
		public WorkOrder WorkOrder
		{
			get
			{
				return this._WorkOrder.Entity;
			}
			set
			{
				WorkOrder previousValue = this._WorkOrder.Entity;
				if (((previousValue != value) 
							|| (this._WorkOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrder.Entity = null;
						previousValue.WorkOrderRouting.Remove(this);
					}
					this._WorkOrder.Entity = value;
					if ((value != null))
					{
						value.WorkOrderRouting.Add(this);
						this._WorkOrderID = value.WorkOrderID;
					}
					else
					{
						this._WorkOrderID = default(int);
					}
					this.SendPropertyChanged("WorkOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
